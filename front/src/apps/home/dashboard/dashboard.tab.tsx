// File: front/src/apps/home/dashboard/dashboard.tab.tsx
// Last change: Changed userRole to accessRole

import React from "react";
import type { AccessRole } from "common/types/universal/access-role.types";
import "./dashboard.tab.css";

interface DashboardTabProps {
  isAuthenticated: boolean;
  accessRole: AccessRole;
}

const DashboardTab: React.FC<DashboardTabProps> = ({ isAuthenticated, accessRole }) => {
  const mockMetrics = {
    vehiclesInProcess: isAuthenticated ? 23 : 8,
    averageProcessingTime: isAuthenticated ? "4.2h" : "3.1h", 
    capacityUtilization: isAuthenticated ? 89 : 67,
    delayedVehicles: isAuthenticated ? 3 : 1
  };

  const mockAlerts = isAuthenticated ? [
    { type: "danger", icon: "‚ö†Ô∏è", title: "Oneskorenie v lakovan√≠", description: "BMW X5 (BA123CD) je o 2 hodiny za pl√°nom", time: "pred 15 min" },
    { type: "warning", icon: "üîß", title: "Po≈æaduje pozornos≈•", description: "Audi A4 na stanici pr√≠pravy ƒçak√° na kontrolu kvality", time: "pred 32 min" },
    { type: "info", icon: "üìã", title: "Nov√© vozidlo", description: "Mercedes C-Class (BL987FG) zaregistrovan√© do syst√©mu", time: "pred 1 hodinou" }
  ] : [
    { type: "info", icon: "üìã", title: "Demo re≈æim", description: "Prihl√°s sa pre re√°lne d√°ta a kompletn√© funkcie", time: "teraz" },
    { type: "warning", icon: "üîß", title: "Mock vozidlo", description: "VW Golf ƒçak√° na diagnostiku", time: "pred 45 min" }
  ];

  return (
    <div className="dashboard-tab">
      <div className="dashboard-grid">
        <div className="dashboard-main">
          <div className="metric-cards">
            <div className="metric-card">
              <div className="metric-value">{mockMetrics.vehiclesInProcess}</div>
              <div className="metric-label">Vozidl√° v procese</div>
              <div className="metric-change positive">+12% tento t√Ω≈æde≈à</div>
            </div>
            <div className="metric-card">
              <div className="metric-value">{mockMetrics.averageProcessingTime}</div>
              <div className="metric-label">Priemern√Ω ƒças spracovania</div>
              <div className="metric-change negative">+8% oproti minul√©mu t√Ω≈æd≈àu</div>
            </div>
            <div className="metric-card">
              <div className="metric-value">{mockMetrics.capacityUtilization}%</div>
              <div className="metric-label">Vyu≈æitie kapacity</div>
              <div className="metric-change positive">+3% tento mesiac</div>
            </div>
            <div className="metric-card">
              <div className="metric-value">{mockMetrics.delayedVehicles}</div>
              <div className="metric-label">Oneskoren√© vozidl√°</div>
              <div className="metric-change negative">+2 od vƒçera</div>
            </div>
          </div>

          <div className="chart-card">
            <div className="chart-header">Vyu≈æitie stan√≠c za posledn√Ωch 7 dn√≠</div>
            <div className="chart-placeholder">
              üìä {isAuthenticated ? 'Chart s re√°lnymi d√°tami' : 'Demo chart - prihl√°s sa pre re√°lne d√°ta'}
            </div>
          </div>
        </div>

        <div className="dashboard-sidebar">
          <div className="alerts-panel">
            <div className="alerts-header">
              {isAuthenticated ? 'Urgentn√© upozornenia' : 'Demo upozornenia'}
            </div>
            {mockAlerts.map((alert, index) => (
              <div key={index} className="alert-item">
                <div className={`alert-icon ${alert.type}`}>{alert.icon}</div>
                <div className="alert-content">
                  <div className="alert-title">{alert.title}</div>
                  <div className="alert-description">{alert.description}</div>
                  <div className="alert-time">{alert.time}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardTab;