// File: database/schema.prisma
// Last change: Added Session model for database-backed session storage

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../database/generated"
}

// ==================================================
// MAIN MODELS
// ==================================================

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String
  password    String?
  is_verified Boolean      @default(false)
  is_active   Boolean      @default(true)
  memberships Membership[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map("users")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  type        String
  description String?
  is_verified Boolean      @default(false)
  memberships Membership[]
  invites     Invite[]
  stages      Stage[]
  vehicles    Vehicle[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map("organizations")
}

model Membership {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [user_id], references: [id])
  user_id         String
  organization    Organization   @relation(fields: [organization_id], references: [id])
  organization_id String
  access_role     String // Changed to String to be defined in common
  business_role   String?
  status          String // Changed to String to be defined in common
  auth_methods    String[] // Changed to String[] to be defined in common
  rfid_tag        String?        @unique
  qr_code         String?        @unique
  usb_key_id      String?        @unique
  task_progress   TaskProgress[]
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  @@unique([user_id, organization_id])
  @@map("memberships")
}

model Invite {
  id              String       @id @default(cuid())
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  email           String
  access_role     String // Changed to String to be defined in common
  token           String       @unique
  expires_at      DateTime
  created_at      DateTime     @default(now())

  @@map("invites")
}

model Vehicle {
  id                   String       @id @default(cuid())
  vin                  String?      @unique
  brand                String
  model                String
  year                 Int?
  registration_number  String
  customer_name        String
  customer_email       String?
  customer_phone       String?
  is_active            Boolean      @default(true)
  notes                String?
  qr_code_token        String       @unique
  tracking_token       String       @unique
  entry_time           DateTime     @default(now())
  estimated_completion DateTime?
  organization         Organization @relation(fields: [organization_id], references: [id])
  organization_id      String
  current_stage        Stage?       @relation(name: "CurrentStage", fields: [current_stage_id], references: [id])
  current_stage_id     String?
  tasks                Task[]
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt

  @@map("vehicles")
}

model Stage {
  id                String       @id @default(cuid())
  name              String
  icon              String?
  color_hsl         String?
  category          String?
  sequence          Int
  is_active         Boolean      @default(true)
  is_required       Boolean      @default(false)
  organization      Organization @relation(fields: [organization_id], references: [id])
  organization_id   String
  tasks             Task[]
  vehicles_in_stage Vehicle[]    @relation("CurrentStage")
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  @@unique([organization_id, sequence])
  @@map("stages")
}

model Task {
  id                 String         @id @default(cuid())
  title              String
  sequence           Int
  description        String?
  estimated_duration Int?
  priority           String?
  is_completed       Boolean        @default(false)
  vehicle            Vehicle        @relation(fields: [vehicle_id], references: [id])
  vehicle_id         String
  stage              Stage          @relation(fields: [stage_id], references: [id])
  stage_id           String
  task_progress      TaskProgress[]
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt

  @@unique([vehicle_id, stage_id, sequence])
  @@map("tasks")
}

model TaskProgress {
  id                   String      @id @default(cuid())
  status               String // Changed to String to be defined in common
  notes                String?
  started_at           DateTime?
  completed_at         DateTime?
  task                 Task        @relation(fields: [task_id], references: [id])
  task_id              String
  worker               Membership? @relation(fields: [worker_membership_id], references: [id])
  worker_membership_id String?
  created_at           DateTime    @default(now())
  updated_at           DateTime    @updatedAt

  @@map("task_progress")
}

model Session {
  id         String   @id @default(cuid())
  sid        String   @unique
  data       String
  expires_at DateTime
  created_at DateTime @default(now())

  @@map("sessions")
}
