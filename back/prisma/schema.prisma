// File: lakovna/back/prisma/schema.prisma
// Last change: Merged robust Sendeliver structure with Lakov≈àa domain models

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE AUTH & ORGANIZATION MODELS ---

model Organization {
  id        String       @id @default(uuid())
  name      String
  vatNumber String?      @unique @map("vat_number")
  address   String?
  city      String?
  postalCode String?      @map("postal_code")
  country   String?
  
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // Relations
  memberships Membership[]
  invitations Invitation[]
  joinRequests JoinRequest[]
}

model Worker {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String?
  googleId     String?      @unique @map("google_id")
  name         String
  imageUrl     String?      @map("image_url")
  role         WorkerRole   @default(WORKER)
  
  // Auth methods
  rfidTag      String?      @unique @map("rfid_tag")
  qrCode       String?      @unique @map("qr_code")
  usbKeyId     String?      @unique @map("usb_key_id")

  isActive     Boolean      @default(true) @map("is_active")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  memberships  Membership[]
  sentInvitations Invitation[] @relation("InvitationSender")
  joinRequests JoinRequest[]
  taskProgress TaskProgress[]
  workSessions WorkSession[]
  vehicleHistory VehicleHistory[] @relation("WorkerHistory")
}

model Membership {
  workerId       String
  organizationId String
  role           WorkerRole   @default(WORKER)
  status         MembershipStatus @default(PENDING)
  assignedAt     DateTime     @default(now()) @map("assigned_at")

  worker         Worker       @relation(fields: [workerId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([workerId, organizationId])
  @@map("memberships")
}

model Invitation {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  invitedById    String       @map("invited_by_id")
  email          String
  role           WorkerRole   @default(WORKER)
  token          String       @unique
  expiresAt      DateTime     @map("expires_at")
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime     @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      Worker       @relation("InvitationSender", fields: [invitedById], references: [id])

  @@unique([organizationId, email])
  @@map("invitations")
}

model JoinRequest {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  workerId       String       @map("worker_id")
  status         JoinRequestStatus @default(PENDING)
  createdAt      DateTime     @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  worker         Worker       @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@unique([organizationId, workerId])
  @@map("join_requests")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime @map("expires_at")
}


// --- LAKOVNA DOMAIN MODELS ---

model Customer {
  id      String    @id @default(uuid())
  name    String
  email   String?   @unique
  phone   String?
  address String?
  
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  vehicles Vehicle[]
  @@map("customers")
}

model Vehicle {
  id           String   @id @default(uuid())
  brand        String
  model        String
  registration String   @unique
  vin          String?  @unique
  color        String?
  year         Int?
  
  customerId   String   @map("customer_id")
  stageId      Int?     @map("stage_id")
  status       VehicleStatus @default(WAITING)
  
  positionX    Int?     @map("position_x")
  positionY    Int?     @map("position_y")

  qrCode        String   @unique @default(uuid()) @map("qr_code")
  trackingToken String   @unique @default(uuid()) @map("tracking_token")

  entryTime           DateTime  @default(now()) @map("entry_time")
  estimatedCompletion DateTime? @map("estimated_completion")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  customer     Customer @relation(fields: [customerId], references: [id])
  currentStage Stage?   @relation(fields: [stageId], references: [id])
  workOrder    WorkOrder?
  taskProgress TaskProgress[]
  vehicleHistory VehicleHistory[]

  @@map("vehicles")
}

model Stage {
  id         Int      @id @default(autoincrement())
  name       String
  icon       String
  color      String
  positionX  Int      @map("position_x")
  positionY  Int      @map("position_y")
  sequence   Int      @unique
  isActive   Boolean  @default(true) @map("is_active")
  
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  tasks      StageTask[]
  vehicles   Vehicle[]
  taskProgress TaskProgress[]

  @@map("stages")
}

model StageTask {
  id                Int          @id @default(autoincrement())
  stageId           Int          @map("stage_id")
  title             String
  description       String
  sequence          Int
  priority          TaskPriority @default(MEDIUM)
  estimatedDuration Int          @default(30) @map("estimated_duration") // in minutes
  
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  // Relations
  stage    Stage          @relation(fields: [stageId], references: [id], onDelete: Cascade)
  progress TaskProgress[]

  @@unique([stageId, sequence])
  @@map("stage_tasks")
}

model TaskProgress {
  id          String     @id @default(uuid())
  vehicleId   String     @map("vehicle_id")
  stageId     Int        @map("stage_id")
  taskId      Int        @map("task_id")
  workerId    String?    @map("worker_id")
  
  status      TaskStatus @default(TODO)
  startedAt   DateTime?  @map("started_at")
  completedAt DateTime?  @map("completed_at")
  notes       String?
  photos      String[]   @default([])

  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  vehicle Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  stage   Stage     @relation(fields: [stageId], references: [id])
  task    StageTask @relation(fields: [taskId], references: [id])
  worker  Worker?   @relation(fields: [workerId], references: [id])

  @@unique([vehicleId, taskId])
  @@map("task_progress")
}

model WorkOrder {
  id          String          @id @default(uuid())
  vehicleId   String          @unique @map("vehicle_id")
  orderNumber String          @unique @default(uuid()) @map("order_number")
  description String?
  priority    OrderPriority   @default(NORMAL)
  status      WorkOrderStatus @default(CREATED)
  
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("work_orders")
}

model VehicleHistory {
  id        String   @id @default(uuid())
  vehicleId String   @map("vehicle_id")
  workerId  String?  @map("worker_id")
  action    String
  details   Json?
  timestamp DateTime @default(now())

  // Relations
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  worker  Worker? @relation(name: "WorkerHistory", fields: [workerId], references: [id])

  @@map("vehicle_history")
}

model WorkSession {
  id         String   @id @default(uuid())
  workerId   String   @map("worker_id")
  startTime  DateTime @default(now()) @map("start_time")
  endTime    DateTime? @map("end_time")
  authMethod String   @map("auth_method") // "rfid", "qr", "usb", "password"

  // Relations
  worker Worker @relation(fields: [workerId], references: [id])

  @@map("work_sessions")
}


// --- ENUMS ---

enum WorkerRole {
  ADMIN
  MANAGER
  WORKER
  VIEWER
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REJECTED
  SUSPENDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VehicleStatus {
  WAITING
  MOVING
  DELAYED
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  SKIPPED
  DELAYED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum OrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WorkOrderStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}
