// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Customer model
model Customer {
  id       String    @id @default(uuid())
  name     String
  email    String?   @unique
  phone    String?
  address  String?
  vehicles Vehicle[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("customers")
}

// Main Vehicle model
model Vehicle {
  id           String        @id @default(uuid())
  brand        String
  model        String
  registration String        @unique
  color        String?
  year         Int?
  vin          String?       @unique
  
  // Customer relation
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  
  // Current workflow state
  currentStage Stage?        @relation(fields: [stageId], references: [id])
  stageId      Int?
  status       VehicleStatus @default(WAITING)
  
  // TrackLine position
  positionX    Int?
  positionY    Int?
  
  // Tracking
  qrCode       String        @unique @default(uuid())
  trackingToken String       @unique @default(uuid())
  
  // Workflow tracking
  workOrder    WorkOrder?
  taskProgress TaskProgress[]
  vehicleHistory VehicleHistory[]
  
  // Timestamps
  entryTime    DateTime      @default(now())
  estimatedCompletion DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("vehicles")
}

// Stage model (10 processing stations)
model Stage {
  id        Int           @id @default(autoincrement())
  name      String
  icon      String
  color     String
  
  // StageLine position
  positionX Int
  positionY Int
  sequence  Int           @unique
  
  // Configuration
  isActive  Boolean       @default(true)
  isRequired Boolean      @default(true)
  
  // Relations
  tasks     StageTask[]
  vehicles  Vehicle[]
  taskProgress TaskProgress[]
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@map("stages")
}

// StageTask model (8 tasks per stage)
model StageTask {
  id          Int               @id @default(autoincrement())
  stage       Stage             @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId     Int
  
  title       String
  description String
  sequence    Int
  priority    TaskPriority      @default(MEDIUM)
  
  // Estimated duration in minutes
  estimatedDuration Int         @default(30)
  
  // Relations
  progress    TaskProgress[]
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@unique([stageId, sequence])
  @@map("stage_tasks")
}

// TaskProgress model (tracking task execution)
model TaskProgress {
  id        String           @id @default(uuid())
  
  // Relations
  vehicle   Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String
  stage     Stage            @relation(fields: [stageId], references: [id])
  stageId   Int
  task      StageTask        @relation(fields: [taskId], references: [id])
  taskId    Int
  worker    Worker?          @relation(fields: [workerId], references: [id])
  workerId  String?
  
  // Progress tracking
  status    TaskStatus       @default(TODO)
  startedAt DateTime?
  completedAt DateTime?
  notes     String?
  
  // Photos/documentation
  photos    String[]         @default([])
  
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  @@unique([vehicleId, taskId])
  @@map("task_progress")
}

// Worker model (team management)
model Worker {
  id       String            @id @default(uuid())
  name     String
  email    String            @unique
  role     WorkerRole        @default(WORKER)
  
  // Authentication methods
  rfidTag  String?           @unique
  qrCode   String?           @unique
  usbKeyId String?           @unique
  
  // Status
  isActive Boolean           @default(true)
  
  // Relations
  taskProgress TaskProgress[]
  workSessions WorkSession[]
  vehicleHistory VehicleHistory[] @relation("WorkerHistory")  // âœ… FIXED - Added opposite relation
  
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  @@map("workers")
}

// WorkOrder model (business workflow)
model WorkOrder {
  id          String          @id @default(uuid())
  vehicle     Vehicle         @relation(fields: [vehicleId], references: [id])
  vehicleId   String          @unique
  
  orderNumber String          @unique @default(uuid())
  description String?
  priority    OrderPriority   @default(NORMAL)
  
  // Pricing
  estimatedCost Decimal?
  actualCost    Decimal?
  
  // Timeline
  plannedStart    DateTime?
  plannedEnd      DateTime?
  actualStart     DateTime?
  actualEnd       DateTime?
  
  status      WorkOrderStatus @default(CREATED)
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  @@map("work_orders")
}

// VehicleHistory model (audit trail)
model VehicleHistory {
  id        String          @id @default(uuid())
  vehicle   Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String
  
  action    String          // "stage_entered", "task_started", "task_completed"
  fromStage Int?
  toStage   Int?
  details   Json?
  
  worker    Worker?         @relation(name: "WorkerHistory", fields: [workerId], references: [id])
  workerId  String?
  
  timestamp DateTime        @default(now())
  
  @@map("vehicle_history")
}

// WorkSession model (worker time tracking)
model WorkSession {
  id        String    @id @default(uuid())
  worker    Worker    @relation(fields: [workerId], references: [id])
  workerId  String
  
  startTime DateTime  @default(now())
  endTime   DateTime?
  
  authMethod String   // "rfid", "qr", "usb", "password"
  
  @@map("work_sessions")
}

// Enums
enum VehicleStatus {
  WAITING
  MOVING
  DELAYED
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  SKIPPED
  DELAYED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum WorkerRole {
  ADMIN
  MANAGER
  WORKER
  VIEWER
}

enum OrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WorkOrderStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}